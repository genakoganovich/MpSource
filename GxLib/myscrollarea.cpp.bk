#include <QWidget>
#include <QWheelEvent>
#include <QApplication>
#include <QDebug>

#include "myscrollarea.h"


MyScrollArea::MyScrollArea(QWidget *plt, int mrb)
{
    plot = plt;
    setWidget(plot);
    mv=0; mvrb=mrb;
    setFrameStyle(0);
    rubberBand = NULL;
    setMouseTracking(true);
    viewport()->setMouseTracking(true);

    ignore = false;

    connect(
             horizontalScrollBar(),
             SIGNAL(valueChanged(int)),
             this,
             SLOT  (on_hScroll(int))
           );

    connect(
             verticalScrollBar(),
             SIGNAL(valueChanged(int)),
             this,
             SLOT  (on_vScroll(int))
           );
}


void MyScrollArea::wheelEvent(QWheelEvent* event)
{
    double d = event->delta();
    double z = 1+0.002*abs(d); if(d<0) z = 1/z;

    int xm = event->pos().x();
    int ym = event->pos().y();

    double zx = z;
    double zy = z;

    if((mvrb&1)==0) zy=1;
    if((mvrb&2)==0) zx=1;

    emitZoomChanged(zx, zy, xm, ym);
}

void MyScrollArea::mousePressEvent ( QMouseEvent * event )
{
    if(rubberBand)
    {
        if(event->button()==Qt::RightButton)
        {
            setCursor(Qt::ArrowCursor);

            rubberBand->hide();
            delete rubberBand;
            rubberBand=NULL;
        }
        else
        {
            origin = event->pos();

            rubberBand->setGeometry(QRect(origin, QSize()));
            rubberBand->show();
        }

        return;
    }
    else if(mvrb && event->button()==Qt::RightButton)
    {
        xo=event->x();
        yo=event->y();
        mv=1;
        setCursor(Qt::OpenHandCursor);
    }
    emit mouseEvent(event);
}

void MyScrollArea::mouseReleaseEvent ( QMouseEvent * event )
{
    if(rubberBand)
    {
        setCursor(Qt::ArrowCursor);

        QRect r = rubberBand->geometry();

        rubberBand->hide();
        delete rubberBand;
        rubberBand=NULL;

        emit zoomW(r);
    }
    else if(event->button()==Qt::RightButton)
    {
        setCursor(Qt::ArrowCursor);
        mv=0;
    }

    emit mouseEvent(event);
}


void MyScrollArea::mouseMoveEvent  ( QMouseEvent * event )
{
    int x=event->x();
    int y=event->y();

    if(rubberBand)
    {
        rubberBand->setGeometry(QRect(origin, event->pos()).normalized());
        return;
    }
    else if(mv)
    {
        int dx = xo - x;
        int dy = yo - y;

        if((mvrb&1)==0) dy=0;
        if((mvrb&2)==0) dx=0;

        setHscroll(Hscroll()+dx);
        setVscroll(Vscroll()+dy);

        xo=x;
        yo=y;

//      qDebug() << "Move x=" << x << "y=" << y << "dx=" << dx << "dy=" << dy;

        x = Hscroll();
        y = Vscroll();

        if((mvrb&1)==0) y = -1;
        if((mvrb&2)==0) x = -1;

        emitZoomChanged(0, 0, x, y);
    }

    emit mouseEvent(event);
}


void MyScrollArea::on_vScroll(int value)
{
    if(ignore) return;

    int x = horizontalScrollBar()->value();
    int y = verticalScrollBar  ()->value();

//  qDebug() << "Vscroll x=" << x << "y=" << y;

//    emitZoomChanged(0, 0, -1, y);
}

void MyScrollArea::on_hScroll(int value)
{
    if(ignore) return;

    int x = horizontalScrollBar()->value();
    int y = verticalScrollBar  ()->value();

//    emitZoomChanged(0, 0, x, -1);
}


void MyScrollArea::keyPressEvent(QKeyEvent *event)
{
    QWidget::keyPressEvent(event);
}


void MyScrollArea::scrollContentsBy(int dx, int dy)
{
    QScrollArea::scrollContentsBy(dx, dy);
}

void MyScrollArea::setZoomW(int on)
{
    if(on && !rubberBand)
    {
        rubberBand = new QRubberBand(QRubberBand::Rectangle, this);

        QPixmap a = QPixmap(":/images/ZoomWCurs.xpm");
        setCursor(QCursor(a,10,8));
    }
    else if(!on && rubberBand)
    {
        rubberBand->hide();
        delete rubberBand;
        rubberBand=NULL;
    }
}


void MyScrollArea::emitZoomChanged(double zx, double zy, int x, int y)
{
    // zx==0 && zy==0 - scrolling to xc, yc;
    // else           - central zoom

    emit zoomChanged(zx, zy, x, y);
}

void MyScrollArea::setVscroll(int v)
{
    ignore = true;

    if((mvrb&1)==0) v=0;

    verticalScrollBar()->setValue(v);

    ignore = false;
}

void MyScrollArea::setHscroll(int v)
{
    ignore = true;

    if((mvrb&2)==0) v=0;

    horizontalScrollBar()->setValue(v);

    ignore = false;
}
